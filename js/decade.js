// Generated by CoffeeScript 1.8.0
(function() {
  var commaFormat, filterData, percentFormat, renderBar, renderPie;

  percentFormat = d3.format(".0%");

  commaFormat = d3.format("0,000");

  d3.csv("data/ventures_by_decade.csv", function(data) {
    var barGroup, chart, data_1960s, data_1970s, data_1980s, data_1990s, data_2000s, data_2010s, decadeTotal, drawDecade, e, h, height, margin, svg, totalData, w, width, x, xAxis, y, yAxis;
    totalData = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_total,
          freq: +e.freq_total,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_1960s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_1960s,
          freq: +e.freq_1960s,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_1970s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_1970s,
          freq: +e.freq_1970s,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_1980s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_1980s,
          freq: +e.freq_1980s,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_1990s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_1990s,
          freq: +e.freq_1990s,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_2000s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_2000s,
          freq: +e.freq_2000s,
          kind: e.kind
        });
      }
      return _results;
    })();
    data_2010s = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        e = data[_i];
        _results.push({
          name: e.name,
          value: +e.value_2010s,
          freq: +e.freq_2010s,
          kind: e.kind
        });
      }
      return _results;
    })();
    decadeTotal = [{
      decade: '1960s',
      value: 119
    }, {
      decade: '1970s',
      value: 494
    }, {
      decade: '1980s',
      value: 1310
    }, {
      decade: '1990s',
      value: 2147
    }, {
      decade: '2000s',
      value: 3341
    }, {
      decade: '2010s',
      value: 1233
    }];
    margin = {
      top: 30,
      right: 0,
      bottom: 30,
      left: 0
    };
    w = 500;
    h = 300;
    width = w - margin.left - margin.right;
    height = h - margin.top - margin.bottom;
    x = d3.scale.ordinal().domain(decadeTotal.map(function(d) {
      return d.decade;
    })).rangeRoundBands([0, width], .25);
    y = d3.scale.linear().domain([0, 3341]).range([height, 0]);
    xAxis = d3.svg.axis().scale(x).orient("bottom");
    yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(commaFormat);
    svg = d3.select("#decades").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).attr("display", "block").classed("center", true);
    chart = svg.append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
    chart.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(xAxis);
    barGroup = chart.selectAll(".bargroup").data(decadeTotal).enter().append("g").classed("bargroup", true);
    barGroup.append("rect").attr("class", "decade_bar").attr("x", function(d) {
      return x(d.decade);
    }).attr("y", function(d) {
      return y(d.value);
    }).attr("width", x.rangeBand()).attr("height", function(d) {
      return height - y(d.value);
    }).on("mouseenter", function() {
      return d3.select(this).transition().style("opacity", .3);
    }).on("mouseleave", function() {
      return d3.select(this).transition().style("opacity", 1);
    }).on("click", function() {
      var decade = d3.select(this).datum().decade;
      drawDecade(decade);
      d3.select("#decade-caption").html("Ventures Founded in " + decade)
    });
    barGroup.append("text").attr("class", "text-on-bar").attr("x", function(d) {
      return x(d.decade);
    }).attr("text-anchor", "middle").attr("dx", x.rangeBand() / 2).attr("y", function(d) {
      return y(d.value);
    }).attr("dy", "-1.2em").text(function(d) {
      return commaFormat(d.value);
    }).style("opacity", 1);

    drawDecade = function(decade) {
      var decadeData;
      if (decade === 'total') {
        decadeData = totalData;
        d3.select("#show-total").classed("btn-disabled", true)
      } else {
        d3.select("#show-total").classed("btn-disabled", false)
      }
      if (decade === '1960s') {
        decadeData = data_1960s;
      }
      if (decade === '1970s') {
        decadeData = data_1970s;
      }
      if (decade === '1980s') {
        decadeData = data_1980s;
      }
      if (decade === '1990s') {
        decadeData = data_1990s;
      }
      if (decade === '2000s') {
        decadeData = data_2000s;
      }
      if (decade === '2010s') {
        decadeData = data_2010s;
      }
      renderBar({
        data: decadeData,
        kind: "legal",
        w: 400,
        h: 200,
        targetId: "#legal",
        margin: {
          top: 0,
          right: 30,
          bottom: 30,
          left: 160
        }
      });
      renderBar({
        data: decadeData,
        kind: "ind",
        w: 400,
        h: 200,
        targetId: "#ind",
        margin: {
          top: 0,
          right: 30,
          bottom: 30,
          left: 230
        }
      });
      renderPie({
        data: decadeData,
        kind: "status",
        w: 200,
        h: 200,
        targetId: "#status",
        margin: {
          top: 0,
          right: 0,
          bottom: 30,
          left: 0
        }
      });
    };
    drawDecade('total');
    d3.select("#show-total").classed("btn-disabled", true)
    d3.select("#show-total").on("click", function() {
      drawDecade('total');
      d3.select("#decade-caption").html("All Ventures");
      d3.select("#show-total").classed("btn-disabled", true)
    })
  });

  renderPie = function(param) {
    var arc, chart, color, data, g, height, legends, pie, radius, svg, width;
    d3.select(param.targetId).select("svg").remove();
    data = filterData(param.kind, param.data);
    width = param.w - param.margin.left - param.margin.right;
    height = param.h - param.margin.top - param.margin.bottom;
    radius = (Math.min(width, height)) / 2;
    color = d3.scale.ordinal().domain(data.map(function(d) {
      return d.name;
    })).range(["#adc1cd", "#cccc99", "#fff"]);
    arc = d3.svg.arc().outerRadius(radius - 10).innerRadius(30);
    pie = d3.layout.pie().sort(null).value(function(d) {
      return d.freq;
    });
    svg = d3.select(param.targetId).append("svg").attr("width", param.w).attr("height", param.h);
    chart = svg.append("g").attr("transform", "translate(" + (width / 2 + param.margin.left) + ", " + (height / 2 + param.margin.top) + ")");
    g = chart.selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
    g.append("path").attr("d", arc).style("fill", "white").transition().duration(400).style("fill", function(d) {
      return color(d.data.name);
    });
    g.append("text").attr("transform", function(d) {
      return "translate(" + (arc.centroid(d)) + ")";
    }).style("text-anchor", "middle").text(function(d) {
      if (d.data.freq > .03) {
        return percentFormat(d.data.freq);
      }
    }).classed("text-on-bar", true).style("opacity", 0).transition().duration(400).style("opacity", 1);
    legends = svg.selectAll("g .legends").data(data).enter().append("g").classed("legends", true).attr("transform", function(d, i) {
      return "translate(" + (i * 60 + 7) + ", " + (param.h - 25) + ")";
    });
    legends.append("rect").attr("x", 0).attr("y", 0).attr("width", 60).attr("height", 20).style("fill", function(d) {
      return color(d.name);
    }).style("stroke-dasharray", "60, 20, 60, 20").style("stroke", "lightgray").style("stroke-width", "0.5");
    legends.append("text").attr("text-anchor", "middle").attr("x", 30).attr("y", 10).attr("dy", ".3em").classed("text-on-bar", true).text(function(d) {
      return d.name;
    });
  };

  renderBar = function(param) {
    var barGroup, chart, data, height, svg, width, x, xAxis, y, yAxis;
    d3.select(param.targetId).select("svg").remove();
    data = filterData(param.kind, param.data);
    width = param.w - param.margin.left - param.margin.right;
    height = param.h - param.margin.top - param.margin.bottom;
    x = d3.scale.linear().domain([
      0, d3.max(data, function(d) {
        return d.freq;
      })
    ]).range([0, width]);
    y = d3.scale.ordinal().domain(data.map(function(d) {
      return d.name;
    })).rangeRoundBands([0, height], .1);
    xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(percentFormat);
    if (param.kind === "status") {
      xAxis.ticks(3);
    } else {
      xAxis.ticks(6);
    }
    yAxis = d3.svg.axis().scale(y).orient("left");
    svg = d3.select(param.targetId).append("svg").attr("width", width + param.margin.left + param.margin.right).attr("height", height + param.margin.top + param.margin.bottom);
    chart = svg.append("g").attr("transform", "translate(" + param.margin.left + ", " + param.margin.top + ")");
    chart.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(xAxis);
    chart.append("g").attr("class", "y axis").call(yAxis);
    barGroup = chart.selectAll(".bargroup").data(data).enter().append("g").classed("bargroup", true);
    barGroup.append("rect").attr("class", "decade_small_bar").attr("y", function(d) {
      return y(d.name);
    }).attr("height", y.rangeBand()).attr("width", 0).transition().duration(400).attr("width", function(d) {
      return x(d.freq);
    });
    barGroup.append("text").attr("class", "text-on-bar").attr("x", function(d) {
      return x(d.freq);
    }).attr("dx", ".2em").attr("y", function(d) {
      return y(d.name);
    }).attr("dy", y.rangeBand() / 2).text(function(d) {
      return commaFormat(d.value);
    }).style("opacity", 0).transition().duration(400).style("opacity", 1);
  };

  filterData = function(kind, data) {
    var filteredData;
    filteredData = data.filter(function(d) {
      return d.kind === kind;
    });
    if (kind === "ind") {
      filteredData.sort(function(a, b) {
        return b.value - a.value;
      });
      filteredData = filteredData.filter(function(e) {
        return e.name !== "Non-Profit";
      });
      filteredData = filteredData.filter(function(e, i) {
        return i <= 5;
      });
    }
    return filteredData;
  };

}).call(this);
